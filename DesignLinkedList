 /**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode head;
    public int length=0;
    public ListNode solve(int[][] A) {
        for(int i=0;i<A.length;i++){
          if(A[i][0]==0 && A[i][2]==-1){
              addFirst(A[i][1]);
          }else if(A[i][0]==1 && A[i][2]==-1){
              addAtIndex(A[i][1], length);
          }else if(A[i][0]==2){
              addAtIndex(A[i][1], A[i][2]);
          }else if(A[i][0]==3 && A[i][2]==-1){
              delete_node(A[i][1]);
          }
      }
      return head;
    }
     public void delete_node(int position){
        if(position>length-1){
            return;
        }
        if(position==0 && length==1){
           head=null;
            length--;
            return;
        }
        if(position==0 && length>1){
            head=head.next;
            length--;
        }else{
            int count=0;
            ListNode temp=head;
            while(count<position-1){
                temp=temp.next;
                count++;
            }
            temp.next=temp.next.next;
            length--;
        }
    }
     public void addFirst(int value){
        if(head==null){
            head=new ListNode(value);
            head.next=null;
        }else{
            ListNode newNode=new ListNode(value);
            newNode.next=head;
            head=newNode;           
        }       
         length++;        
    }
    public void addAtIndex(int value, int position){
     if(position>length)
           return;
       if(length==0){
           head=new ListNode(value);
           head.next=null;
          
       }else{
           ListNode temp=head;
        ListNode newNode=new ListNode(value);
       if(position==0){
           newNode.next=head;
           head=newNode;
       }
       else{
           int count=0;
           while(count<position-1){
               temp=temp.next;
               count++;
           }
           newNode.next=temp.next;
           temp.next=newNode;
       }
       }        
       length++;
    }     
}
